
// https://www.shadertoy.com/view/7sSSDd
// Modified by ArthurTent
// Created by Quasimondo
// Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
// https://creativecommons.org/licenses/by-nc-sa/3.0/

uniform float iAmplifiedTime;
uniform float iTime;
uniform sampler2D iAudioData;
uniform vec2 iResolution;
uniform vec2 iMouse;
varying vec2 vUv;


#define FFT(a) pow(texelFetch(iAudioData, ivec2(a, 0), 0).x, 5.)
float snd = 0.;
const float PI = 3.1415926;

// MIT Licensed hash From Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)
vec3 hash33(vec3 p)
{
    p = fract(p * vec3(443.8975,397.2973, 491.1871));
    p += dot(p.zxy, p.yxz+19.27);
    return fract(vec3(p.x * p.y, p.z*p.x, p.y*p.z));
}

vec3 stars(in vec3 p)
{
    vec3 c = vec3(0.);
    float res = iResolution.x*0.8;
    
	for (float i=0.;i<4.;i++)
    {
        vec3 q = fract(p*(.15*res))-0.5;
        //q*= snd/10.;
        vec3 id = floor(p*(.15*res));
        vec2 rn = hash33(id).xy;
        float c2 = 1.-smoothstep(0.,.6,length(q));
        c2 *= step(rn.x,.0005+i*i*0.001);
        c += c2*(mix(vec3(1.0,0.49,0.1),vec3(0.75,0.9,1.),rn.y)*0.25+0.75);
        p *= 1.4;
    }
    return c*c*.65;
}
void camera(vec2 fragCoord, out vec3 ro, out vec3 rd, out mat3 t)
{
    float a = 1.0/max(iResolution.x, iResolution.y);
    //rd = normalize(vec3((fragCoord - iResolution.xy*0.5)*a, 0.5));
    rd = normalize(vec3(fragCoord, 1.0));

    ro = vec3(0.0, 0.0, -15.);

    //float ff = min(1.0, step(0.001, iMouse.x) + step(0.001, iMouse.y));
    float ff = min(1.0, step(0.001, iMouse.x) + step(0.001, iMouse.y))+sin(iTime/20.);
    vec2 m = PI*ff + vec2(((iMouse.xy + 0.1) / iResolution.xy) * (PI*2.0));
    //m.y = -m.y;
    m.y = sin(m.y*0.5)*0.3 + 0.5;

    //vec2 sm = sin(m)*sin(iTime), cm = cos(m)*(1.+sin(iTime));
    vec2 sm = sin(m)*(1.+sin(iTime/10.)/2.), cm = cos(m);
    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, cm.y, sm.y, 0.0, -sm.y, cm.y);
    mat3 rotY = mat3(cm.x, 0.0, -sm.x, 0.0, 1.0, 0.0, sm.x, 0.0, cm.x);

    t = rotY * rotX;

    ro = t * ro;
    rd = t * rd;

    rd = normalize(rd);
}
vec3 palette(float t) {
   return vec3(1.,0.314,0.325); 
    if(t <1.)t+=1.;
    vec3 a = vec3(0.5);
    vec3 b = vec3(0.5);
    vec3 c = vec3(1.);
    vec3 d = vec3(0.563,0.416,0.457 + .2);
    
    return a + b*cos( 6.28 * c * (t+d)); // A + B * cos ( 2pi * (Cx + D) )
}


//Parts of this shader code are based on the work of Blackle Mori / https://www.shadertoy.com/view/wtVyWK
//Siren model trained and customized by Mario Klingemann / @Quasimondo

float scene(vec3 p) {
    //sdf is undefined outside the unit sphere, uncomment to witness the abominations
    if (length(p) > 1.) {
        return length(p)-.8;
    }
    p/=1.+snd;
    //neural networks can be really compact... when they want to be
    vec4 f0_0=sin(p.y*vec4(1.156,-3.750,2.845,-2.527)+p.z*vec4(3.318,2.539,3.444,3.581)+p.x*vec4(1.420,-.720,-2.169,-3.904)+vec4(3.138,-6.996,-1.817,-6.071));vec4 f0_1=sin(p.y*vec4(-1.034,-3.190,1.984,.150)+p.z*vec4(-.681,.224,-3.607,-1.679)+p.x*vec4(-2.620,2.564,.914,1.100)+vec4(6.420,7.633,6.514,-6.156));vec4 f0_2=sin(p.y*vec4(-2.525,-2.077,-.105,2.368)+p.z*vec4(-2.740,-.308,-3.426,3.077)+p.x*vec4(-.250,-3.015,-.405,-2.133)+vec4(8.175,-1.500,-4.482,3.107));vec4 f0_3=sin(p.y*vec4(1.760,-3.716,3.247,-2.239)+p.z*vec4(-3.538,3.612,-3.709,1.414)+p.x*vec4(2.326,-.225,.661,-.430)+vec4(6.375,-4.431,7.926,-.077));vec4 f1_0=sin(mat4(-.179,.198,-.280,-.434,.515,-.156,.034,-.188,-.123,.039,.160,.090,-.292,-.149,-.132,.167)*f0_0+
    mat4(.009,.482,-.105,.158,.145,-.087,.133,.308,.233,.697,-.162,-.722,.015,.397,.181,-.266)*f0_1+
    mat4(-.352,-.242,-.270,.523,.228,.472,.439,-.325,.557,-.409,-.365,.142,.477,.092,-.288,.244)*f0_2+
    mat4(-.305,-.181,.109,-.158,.101,-.031,.027,-.114,.241,.109,-.389,.127,-.451,.441,-.310,.574)*f0_3+
    vec4(-.651,.709,1.644,-1.978))/1.0+f0_0;vec4 f1_1=sin(mat4(-.362,-.671,.077,-.496,.066,.038,.183,-.028,-.139,.447,.077,-.288,.041,.365,-.068,.304)*f0_0+
    mat4(.078,-.177,.561,-.185,.226,-.325,.384,-.331,-.074,.253,.134,-.221,-.015,.261,-.022,.566)*f0_1+
    mat4(-.027,.240,.303,.097,-.266,.450,-.175,.415,.281,.112,-.102,.195,.258,.210,.338,-.060)*f0_2+
    mat4(.234,-.365,-.137,.605,.183,-.208,.465,-.202,-.084,.515,-.095,.516,-.428,-.111,.344,.521)*f0_3+
    vec4(1.968,2.600,2.090,-2.312))/1.0+f0_1;vec4 f1_2=sin(mat4(.386,.007,-.068,.194,.016,.089,.230,.241,-.203,.190,.144,-.087,-.063,-.042,.390,.176)*f0_0+
    mat4(-.072,-.601,-.229,-.175,-.059,-.147,-.354,.063,.024,-.349,.134,-.114,-.546,-.121,.329,.249)*f0_1+
    mat4(-.541,.044,-.186,-.159,.115,.370,-.291,.090,.391,-.271,-.039,-.303,.129,.317,.151,.376)*f0_2+
    mat4(-.021,.112,-.572,.407,.090,-.109,.269,-.296,-.250,-.240,-.470,-.077,-.498,-.085,-.745,.077)*f0_3+
    vec4(.601,1.699,1.774,.915))/1.0+f0_2;vec4 f1_3=sin(mat4(-.284,-.425,-.185,.393,.162,.028,-.079,.119,-.548,.015,.075,-.314,-.276,.326,.280,.402)*f0_0+
    mat4(-.235,.441,-.310,.005,.031,.408,-.283,-.200,-.116,.177,.263,-.259,-.463,.596,.215,-.183)*f0_1+
    mat4(-.246,.229,.161,-.211,.564,-.201,-.031,.014,-.272,.252,-.147,-.289,-.263,.090,-.231,-.343)*f0_2+
    mat4(-.075,-.346,.451,.157,-.176,.033,-.151,.018,.047,.219,-.171,-.282,.181,.416,.549,-.615)*f0_3+
    vec4(-2.201,-2.098,1.318,3.074))/1.0+f0_3;vec4 f2_0=sin(mat4(-.087,-.528,-.534,.243,-.406,.016,.181,-.599,.468,.183,-.393,-.192,-.260,.273,-.164,.254)*f1_0+
    mat4(-.573,-.493,-.386,-.271,.181,-.157,-.491,.121,-.065,.346,-.164,-.828,-.411,.465,-.584,-.349)*f1_1+
    mat4(.071,-.258,-.098,-.290,.252,.723,-.275,-.451,-.052,-.247,-.458,.367,-.105,-.163,.101,-.308)*f1_2+
    mat4(-.047,.018,-.192,.396,-.169,-.267,-.543,-.200,-.377,.100,-.084,.155,-.282,.659,.039,.059)*f1_3+
    vec4(2.769,-1.008,.665,-.082))/1.4+f1_0;vec4 f2_1=sin(mat4(-.038,.189,-.247,.441,.217,-.349,-.057,-.632,-.135,-.589,.642,-.189,.154,-.448,-.669,-.125)*f1_0+
    mat4(.396,-.118,.572,.180,-.054,-.479,.457,-.027,.034,.339,.176,-.075,-.210,-.152,-.700,.480)*f1_1+
    mat4(-.438,.696,.387,.767,-.251,.423,-.233,.322,.126,-.170,-.343,.042,.097,-.153,.038,.054)*f1_2+
    mat4(-.524,.307,-.510,.171,.289,-.312,-.403,-.118,-.175,.435,.126,.249,.420,.133,-.409,.499)*f1_3+
    vec4(.414,.338,-1.860,-2.853))/1.4+f1_1;vec4 f2_2=sin(mat4(-.080,.330,.104,.330,.256,-.710,.237,-.411,-.743,-.552,.375,.551,.028,.325,-.344,-.367)*f1_0+
    mat4(-.062,-.177,-.539,-.330,-.133,-.127,.333,-.221,.056,-.277,.822,.015,.397,-.241,.090,-.203)*f1_1+
    mat4(.047,.320,-.150,.040,.095,.071,.512,-.277,.067,.127,.037,.121,.401,.403,.290,-.045)*f1_2+
    mat4(.399,.132,-.431,-.136,.492,.241,.179,-.266,-.487,-.148,.000,.358,.246,.257,.439,-.276)*f1_3+
    vec4(2.299,-.927,2.089,2.020))/1.4+f1_2;vec4 f2_3=sin(mat4(-.045,.390,.272,.165,-.377,-.268,.148,.336,-.341,.151,.060,.063,-.293,-.089,.367,.465)*f1_0+
    mat4(.017,-.228,-.422,.917,-.360,-.245,.228,-.591,-.346,.514,.272,.439,.343,.206,.251,.092)*f1_1+
    mat4(.223,.424,-.232,-.078,-.898,-.407,.112,.377,-.201,-.035,.014,.228,-.521,.419,.216,-.041)*f1_2+
    mat4(.214,.410,.425,.008,-.038,-.320,-.119,-.348,-.416,.042,.372,.410,.230,-.306,.118,.213)*f1_3+
    vec4(-.155,1.978,1.477,3.064))/1.4+f1_3;vec4 f3_0=sin(mat4(.117,.343,.314,-.490,-.481,-.077,.174,.262,.132,.131,.468,.375,.115,.295,-.491,-.366)*f2_0+
    mat4(-.378,-.662,.046,.325,-.082,.186,-.615,-.395,.425,-.163,.225,.138,-.298,-.295,-.685,.304)*f2_1+
    mat4(-.431,-.467,.184,.468,-.548,-.141,.436,.336,-.733,-.238,.440,-.139,.379,.710,.028,-.382)*f2_2+
    mat4(-.082,-.584,-.305,-.316,-.059,-.111,-.324,-.083,-.449,-.281,.234,-.281,1.090,.852,-.703,-.056)*f2_3+
    vec4(1.641,-2.816,.667,-2.008))/1.7+f2_0;vec4 f3_1=sin(mat4(-.490,.313,.302,.439,-.252,.399,-.335,.273,.087,-.157,.053,-.046,-.161,-.000,.353,.434)*f2_0+
    mat4(-.527,-.552,-.317,.631,-.120,1.029,.055,.000,.428,-.226,-.209,.486,.279,-.428,-.418,-.520)*f2_1+
    mat4(.544,-.358,.465,.502,.094,-.596,.313,.157,-.236,.300,.022,-.263,.302,.189,-.157,.161)*f2_2+
    mat4(-.403,-.259,.220,-.157,-.036,.168,.096,-.131,.335,-.059,.133,-.268,-.202,.382,.221,.108)*f2_3+
    vec4(-.070,-3.009,2.858,-.167))/1.7+f2_1;vec4 f3_2=sin(mat4(.134,.458,-.211,.315,.323,-.006,.154,.440,.121,.381,.349,-.540,.116,-.608,-.310,-.062)*f2_0+
    mat4(-.458,-.094,-.247,.231,.144,-.361,.318,.023,-.218,.578,-.406,.389,.233,.430,.368,-.027)*f2_1+
    mat4(-.355,.437,-.235,-.010,-.314,.571,.333,-.038,.331,-.276,.285,.481,-.223,.022,-.140,-.478)*f2_2+
    mat4(-.657,-.176,-.200,-.123,-.053,.308,.649,.010,-.028,-.363,-.409,-.461,-.459,-.335,-.045,.020)*f2_3+
    vec4(-.052,-.209,-2.461,1.112))/1.7+f2_2;vec4 f3_3=sin(mat4(.582,.319,.250,.204,.190,.123,.256,.247,-.043,-.044,.214,-.312,-.059,.337,-.274,.351)*f2_0+
    mat4(-.183,-.330,.369,-.249,-.048,-.051,.557,.342,-.051,.104,-.174,-.182,.499,.234,-.575,.491)*f2_1+
    mat4(.139,-.589,.022,-.257,.347,-.274,.190,-.152,.377,-.559,.185,.402,-.579,-.418,.759,-.014)*f2_2+
    mat4(.412,.152,-.535,-.216,-.213,-.091,-.095,-.058,-.105,-.191,.428,-.001,-.234,.259,-.410,.785)*f2_3+
    vec4(.489,-2.836,-2.306,-1.655))/1.7+f2_3;vec4 f4_0=sin(mat4(-.511,-.422,.204,-.500,-.220,-1.008,-.101,-1.014,.005,.910,.121,.322,.112,.529,-.178,.255)*f3_0+
    mat4(.399,.436,-.428,.189,.199,-.838,.127,.503,-.257,.896,-.284,-.005,-.244,-.276,.219,1.019)*f3_1+
    mat4(.830,.009,.226,-.033,-.012,.648,-.001,-.007,.477,-.440,.228,-.552,-.149,-.147,-.181,.450)*f3_2+
    mat4(.328,.095,-.179,.640,-.187,-.979,-.605,.621,-.067,.113,.372,-.417,-.131,-.140,.196,.026)*f3_3+
    vec4(-.619,.452,1.854,-2.583))/2.0+f3_0;vec4 f4_1=sin(mat4(.411,.447,-.106,-.119,.560,-.612,-.089,.115,-.579,.405,.089,.063,.532,.094,.373,-.226)*f3_0+
    mat4(-.529,.524,-.123,-.554,-.059,-.059,-.222,-.096,.283,.560,-.370,.258,.313,.610,-.225,-.032)*f3_1+
    mat4(.094,-.682,.282,.574,.837,.067,.056,.591,-.018,.224,.051,-.053,-.309,.078,-.190,-.395)*f3_2+
    mat4(.453,-.059,.220,-.299,.216,-.262,-.243,.508,.396,-.114,.300,-.301,.269,.413,-.240,-.306)*f3_3+
    vec4(-.840,1.873,2.871,.968))/2.0+f3_1;vec4 f4_2=sin(mat4(.464,-.310,.243,-.436,.002,-.570,-.075,-.529,-.130,.799,-.206,.294,.123,-.597,-.690,-.285)*f3_0+
    mat4(-.153,.755,-.161,.142,-.563,-.200,-.176,-.301,.336,-.407,.400,.182,.186,-.257,.466,-.041)*f3_1+
    mat4(.047,.258,-.137,-.070,.536,.489,-.218,-.470,.226,-.166,-.004,.167,-.541,.121,.263,.163)*f3_2+
    mat4(-.237,.211,-.191,.333,-.375,-.108,-.119,.096,.465,-.363,.311,.367,.532,-.101,-.242,-.450)*f3_3+
    vec4(2.407,-1.463,2.104,1.302))/2.0+f3_2;vec4 f4_3=sin(mat4(-.107,.285,.070,-.185,.828,.374,-.686,.667,.055,-.523,.173,.025,-.096,-.162,.293,-.033)*f3_0+
    mat4(.470,-.375,.144,.219,.556,.104,.301,-.511,.163,.360,-.543,-.276,.272,.247,-.318,.147)*f3_1+
    mat4(-.254,1.086,.465,.306,-.262,.100,-.817,.793,-.311,-.184,-.029,.286,-.027,.100,.002,-.360)*f3_2+
    mat4(-.123,-.834,.231,.458,-.020,-.160,-.318,-.334,.152,.257,-.570,.413,-.410,.248,.717,-.470)*f3_3+
    vec4(1.907,.195,-1.477,2.936))/2.0+f3_3;
//vec4 f5_0=sin(mat4(.322,-.253,-.188,-.484,.558,.381,-.494,-.248,-.588,.015,.271,-.704,.113,.611,.137,-.035)*f4_0+
vec4 f5_0=sin(mat4(snd,-.253,-.188,-.484,.558,.381,-.494,-.248,-.588,.015,.271,-.704,.113,.611,.137,-.035)*f4_0+
    mat4(-.165,-.033,-.332,1.088,-.583,-.025,.459,.152,-.570,-.504,.150,.194,-.969,.100,-.223,.355)*f4_1+
    mat4(-.382,.205,.213,.482,-.123,.056,.536,-.372,-.138,-.187,-.354,.528,-.158,-.135,-.216,.572)*f4_2+
    mat4(-.059,.198,-.390,-.371,-.190,-.575,-.473,-.268,.154,-.100,.116,.306,-.636,-.233,-.369,-.366)*f4_3+
    vec4(.895,.829,-3.441,2.067))/2.2+f4_0;vec4 f5_1=sin(mat4(.900,.675,-.463,.024,.092,.298,.313,-.017,-.154,.099,.478,-.016,.279,.504,.039,.468)*f4_0+
    mat4(-.028,.505,-.046,.580,.712,.179,-.260,-.210,-.257,-.360,.350,-.303,.313,-.455,-.260,-.488)*f4_1+
    mat4(.022,-.312,.894,.011,.078,.283,-.413,-.043,.420,.197,.141,-.421,.284,.544,.164,.685)*f4_2+
    mat4(.743,-.752,.310,.333,-.488,-.097,-.040,.121,.342,-.027,-.207,.457,.344,.779,-.839,.025)*f4_3+
    //vec4(-1.182,-1.671,-.700,.627))/2.2+f4_1;vec4 f5_2=sin(mat4(-.423,-.377,-.033,-1.017,.159,-.316,.223,-.258,.456,.041,-.394,.004,-.044,.591,-.343,.339)*f4_0+
    vec4(-snd*10.,-1.671,-.700,.627))/2.2+f4_1;vec4 f5_2=sin(mat4(-.423,-.377,-.033,-1.017,.159,-.316,.223,-.258,.456,.041,-.394,.004,-.044,.591,-.343,.339)*f4_0+
    mat4(.266,.080,-.053,.636,-.048,.181,-.194,.441,.056,-.482,.563,-.455,-.202,-.556,-.369,.359)*f4_1+
    mat4(.182,.642,-.124,-.355,.363,.512,-.058,.000,.154,-.294,.454,.356,.066,.485,-.288,.003)*f4_2+
    mat4(-.529,.462,.137,1.002,-.268,.712,.172,-.543,-.549,.404,.124,-.046,.672,-.008,-.262,-.252)*f4_3+
    vec4(-1.098,-1.607,-.949,.544))/2.2+f4_2;
//vec4 f5_3=sin(mat4(.310,.531,.582,-.231,-.250,.384,-.405,-.709,-.240,-.367,-.238,.268,.848,.141,.263,-.085)*f4_0+
vec4 f5_3=sin(mat4(.310,.531,.582,-.231,-.250,.384,-.405,-snd*20.,-.240,-.367,-.238,.268,.848,.141,.263,-.085)*f4_0+
    mat4(-.109,.048,-.010,-.165,.725,-.283,-.558,-.355,.004,.656,-.435,-.327,-.419,.561,.799,-.052)*f4_1+
    mat4(.617,.596,.250,.030,.014,.994,1.168,.056,-.165,-.370,-.027,-.303,-.130,-.037,-.437,-.191)*f4_2+
    mat4(.816,.938,-.258,-.081,.417,.099,.151,-.440,.423,.343,.223,.236,-.085,-.169,-.532,.334)*f4_3+
    vec4(.531,-.095,-.536,.989))/2.2+f4_3;return dot(f5_0,vec4(-.045,.002,.051,-.013))+
    dot(f5_1,vec4(.040,-.012,.062,.061))+
    dot(f5_2,vec4(.062,.037,-.048,.045))+
    dot(f5_3,vec4(-.032,.033,.046,-.005))+
    0.083;
} 

vec3 norm(vec3 p) {
    mat3 k = mat3(p,p,p)-mat3(0.001);
    return normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])));
}

vec3 erot(vec3 p, vec3 ax, float ro) {
    return mix(dot(p,ax)*ax,p,cos(ro))+sin(ro)*cross(ax,p);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    int max_freq = 100;
    for(int i=1; i < max_freq; i++){
        snd +=FFT(i)*float(i);
    }
    snd /=float(max_freq*20);
    

    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;
    vec2 mouse = (iMouse.xy-0.5*iResolution.xy)/iResolution.y;
    vec3 cam = normalize(vec3(1.5,uv));
    vec2 cam_uv = (fragCoord-.5*iResolution.xy)/iResolution.y;
    
    //camera + rd for stars
    vec3 ro = vec3(0.0);//rd = vec3( 0.0 );
	vec3 rd = normalize(vec3(cam_uv,-1.5));
    mat3 t3 = mat3(1.0);
	camera(uv, ro, rd, t3);
    
    vec3 init = vec3(-3.,0,0);
    //vec3 rd = normalize(vec3(cam_uv,-1.5));
    rd.x+=sin(iAmplifiedTime/1000.)*2.;
    
    float yrot = 0.5;
    float zrot = -iAmplifiedTime*1.42;
    /*
	if (iMouse.z > 0.) {
        yrot += -4.*mouse.y;
        zrot = 4.*mouse.x;
    }
	*/
    cam = erot(cam, vec3(0,1,0), yrot);
    init = erot(init, vec3(0,1,0), yrot);
    cam = erot(cam, vec3(0,0,1), zrot);
    init = erot(init, vec3(0,0,1), zrot);
    
    vec3 p = init;
    bool hit = false;
    for (int i = 0; i < 150 && !hit; i++) {
        float dist = scene(p);
        hit = dist*dist < 1e-6;
        p+=dist*cam;
        if (distance(p,init)>5.) break;
    }
    vec3 n = norm(p);
    vec3 r = reflect(cam,n);
    //don't ask how I stumbled on this texture
    vec3 nz = p - erot(p, vec3(1), 2.) + erot(p, vec3(1), 4.);
    float spec = length(sin(r*3.5+sin(nz*120.)*.15)*.4+.6)/sqrt(3.);
    spec *= smoothstep(-.3,.2,scene(p+r*.2));
    vec3 col = vec3(.1,.1,.12)*spec + pow(spec,8.);
    float bgdot = length(sin(cam*8.)*.4+.6)/2.;
    //vec3 bg = vec3(.1,.1,.11) * bgdot + pow(bgdot, 10.);
    vec3 bg = stars(rd)*(1.+30.*snd);
    //fragColor.xyz = hit ? col *.75+palette(snd*2.+sin(iAmplifiedTime/10.)): bg;
    fragColor.xyz = hit ? col *palette(snd*2.+sin(iAmplifiedTime/10.))*2.: bg;
    fragColor = smoothstep(-.02,1.05,sqrt(fragColor)) * (1.- dot(uv,uv)*.5);
}

void main() {
	vec2 fragCoord = vUv * iResolution;
	mainImage(gl_FragColor, fragCoord);
}

    
